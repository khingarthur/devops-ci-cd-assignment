# This workflow is triggered on every push to the main branch.
name: CI/CD Pipeline with Terraform Deployment

on:
  push:
    branches:
      - main

jobs:
  # The 'build' job handles the testing, scanning, building, and pushing of the Docker image.
  build_and_push:
    runs-on: ubuntu-latest
    env:
      # Use a unique, immutable tag for each build based on the Git commit SHA.
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout Repository
        # Action to check out the code from your repository.
        uses: actions/checkout@v4

      - name: Set up Python
        # Action to set up the Python environment.
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Cache pip dependencies to speed up subsequent runs

      - name: Install Dependencies
        # Install the required Python packages for the application.
        run: pip install -r requirements.txt

      - name: Code Scanning (Security)
        # Use a static analysis tool like Bandit to find security vulnerabilities in your Python code.
        # This is an example of a good SAST practice.
        run: |
          pip install bandit
          bandit -r .

      - name: Log in to Docker Hub
        # Action to log in to the Docker registry using secrets.
        # You must create these secrets in your GitHub repository settings.
        uses: docker/login-action@v3
        with:
          username: khingarthur
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker Image
        # Build the Docker image from your Dockerfile and tag it with the unique commit SHA.
        run: docker build -t khingarthur/hello-world-app:${{ env.IMAGE_TAG }} .

      - name: Image Scanning (Vulnerability)
        # Scan the newly built Docker image for vulnerabilities using Trivy.
        # This is a critical step for container security.
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: khingarthur/hello-world-app:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1' # Exit with a failure code if any vulnerabilities are found.
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Push Docker Image
        # Push the final image to the Docker registry.
        run: docker push khingarthur/hello-world-app:${{ env.IMAGE_TAG }}

  # The 'terraform_deploy' job provisions the AWS infrastructure.
  terraform_deploy:
    runs-on: ubuntu-latest
    needs: build_and_push # This job will only run after 'build_and_push' is successful.
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        # This action installs the specified version of Terraform.
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve \
            -var="key_name=Github-actions" \
            -var="docker_hub_username=khingarthur" \
            -var="docker_image_tag=${{ needs.build_and_push.outputs.IMAGE_TAG }}"
        working-directory: ./terraform
        
        env:
          # Pass AWS credentials as environment variables for the Terraform command.
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # The 'terraform_destroy' job to destroy AWS infrastructure.
  terraform_destroy:
    runs-on: ubuntu-latest
    # This job can be triggered manually.
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        # Use terraform destroy to remove the infrastructure.
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}